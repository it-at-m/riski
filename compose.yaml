volumes:
  riskidata:
services:
  db:
    image: pgvector/pgvector:pg17
    container_name: pgvector-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: example_db
    ports:
      - "5432:5432"
    volumes:
      - riskidata:/var/lib/postgresql/data
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
  kafka:
    image: apache/kafka:4.1.0 
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:9094,CONTROLLER://:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@localhost:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_MESSAGE_FORMAT_VERSION=2.8-IV0
      - KAFKA_CHECK_CSUMS_IN_COMPACTION=true
      - KAFKA_CHECK_CSUMS_IN_COPYING=true
      # - KAFKA_DISABLE_LOG_MESSAGE_FORMAT_VERSION_CHECK=true
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=false
    healthcheck:
      test: "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list"
      interval: 10s
      timeout: 5s
      retries: 10
  # run topic creation with `podman compose --profile init up` or as single service when kafka was already started
  topic-init:
    image: apache/kafka:4.1.0
    profiles: ["init"]
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: >
      sh -c "
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9094 --create --topic my-topic --partitions 1 --replication-factor 1 
      "
